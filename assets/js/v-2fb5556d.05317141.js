(self.webpackChunkblog=self.webpackChunkblog||[]).push([[190],{8473:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-2fb5556d",path:"/fe-note/tip/es6.html",title:"ES6 Tip",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"let const var 有什么区别",slug:"let-const-var-有什么区别",children:[]},{level:2,title:"声明变量的六种方式",slug:"声明变量的六种方式",children:[]}],filePathRelative:"fe-note/tip/es6.md",git:{updatedTime:1631170534e3,contributors:[]}}},3906:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="es6-tip"><a class="header-anchor" href="#es6-tip">#</a> ES6 Tip</h1><h2 id="let-const-var-有什么区别"><a class="header-anchor" href="#let-const-var-有什么区别">#</a> let const var 有什么区别</h2><ol><li>变量提升,let,const 不能,var 可以;</li><li>const 一旦声明，实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动；</li><li>let const 不允许重复声明；</li><li>暂时性死区，like this：(只要快作用域内有let命令，它所声明的变量就绑定这个区域了，不再受外部影响)</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    temp<span class="token operator">=</span><span class="token string">&#39;909&#39;</span><span class="token punctuation">;</span><span class="token comment">//ReferenceError</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ReferenceError</span>\n    <span class="token keyword">let</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="5"><li>块级作用域</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="声明变量的六种方式"><a class="header-anchor" href="#声明变量的六种方式">#</a> 声明变量的六种方式</h2><p>let const var function import class</p>',8),t={render:function(n,s){return e}}}}]);